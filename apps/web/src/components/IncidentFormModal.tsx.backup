import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Dialog, 
  DialogContent
} from '@ciudad-activa/maps/components/ui/dialog';
import { Button } from '@ciudad-activa/maps/components/ui/button';
import { 
  MapPin,
  Camera,
  Send,
  X,
  Upload,
  Plus
} from 'lucide-react';
// Importar iconos m√°s atractivos de react-icons
import { 
  FaTrash, 
  FaTools, 
  FaShieldAlt, 
  FaTree, 
  FaCar, 
  FaExclamationTriangle,
  FaRecycle,
  FaLightbulb,
  FaRoad,
  FaWater,
  FaVolumeMute,
  FaPaw,
  FaImage
} from 'react-icons/fa';
import { CreateIncidentData, IncidentPriority, Coordinates } from '@ciudad-activa/types';

// Tipos de incidencias simplificados y organizados por categor√≠as
const INCIDENT_CATEGORIES = [
  {
    name: 'üóëÔ∏è Limpieza',
    types: [
      {
        id: 'waste-garbage',
        name: 'Basura acumulada',
        icon: 'Trash2',
        color: '#ef4444'
      },
      {
        id: 'waste-recycling',
        name: 'Contenedor lleno',
        icon: 'Recycle',
        color: '#22c55e'
      }
    ]
  },
  {
    name: 'üèóÔ∏è Infraestructura',
    types: [
      {
        id: 'infrastructure-pothole',
        name: 'Bache en la v√≠a',
        icon: 'Construction',
        color: '#f59e0b'
      },
      {
        id: 'infrastructure-lighting',
        name: 'Iluminaci√≥n p√∫blica',
        icon: 'Lightbulb',
        color: '#fbbf24'
      }
    ]
  },
  {
    name: 'üõ°Ô∏è Seguridad',
    types: [
      {
        id: 'safety-vandalism',
        name: 'Vandalismo',
        icon: 'Shield',
        color: '#dc2626'
      },
      {
        id: 'environment-tree',
        name: '√Årbol peligroso',
        icon: 'Trees',
        color: '#16a34a'
      }
    ]
  },
  {
    name: 'üöó Transporte',
    types: [
      {
        id: 'transportation-traffic',
        name: 'Problema de tr√°fico',
        icon: 'Car',
        color: '#2563eb'
      },
      {
        id: 'other-general',
        name: 'Otro problema',
        icon: 'AlertTriangle',
        color: '#7c3aed'
      }
    ]
  }
];

interface IncidentFormModalProps {
  isOpen: boolean;
  onClose: () => void;
  coordinates: Coordinates;
  onSubmit: (data: CreateIncidentData) => void;
}

const ICON_MAP = {
  Trash2,
  Construction,
  Shield,
  Trees,
  Car,
  AlertTriangle,
  Recycle,
  Lightbulb
};

export const IncidentFormModal: React.FC<IncidentFormModalProps> = ({
  isOpen,
  onClose,
  coordinates,
  onSubmit
}) => {
  const [selectedCategory, setSelectedCategory] = React.useState<string>('');
  const [selectedType, setSelectedType] = React.useState<any>(null);
  const [title, setTitle] = React.useState('');
  const [description, setDescription] = React.useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedType) return;

    onSubmit({
      typeId: selectedType.id,
      title: title || selectedType.name,
      description: description || undefined,
      coordinates,
      priority: IncidentPriority.MEDIUM
    });

    // Reset form
    resetForm();
    onClose();
  };

  const resetForm = () => {
    setSelectedCategory('');
    setSelectedType(null);
    setTitle('');
    setDescription('');
  };

  const handleClose = () => {
    resetForm();
    onClose();
  };

  const handleTypeSelect = (type: any) => {
    setSelectedType(type);
    if (!title) {
      setTitle(type.name);
    }
  };

  const selectedCategoryData = INCIDENT_CATEGORIES.find(cat => cat.name === selectedCategory);

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="max-w-md mx-auto bg-white border-0 shadow-2xl rounded-3xl overflow-hidden p-0 max-h-[90vh] overflow-y-auto">
        <motion.div
          initial={{ opacity: 0, scale: 0.9, y: 20 }}
          animate={{ opacity: 1, scale: 1, y: 0 }}
          exit={{ opacity: 0, scale: 0.9, y: 20 }}
          transition={{ duration: 0.3, ease: "easeOut" }}
          className="relative"
        >
          {/* Header simple y limpio */}
          <div className="bg-gradient-to-br from-blue-500 to-blue-600 px-6 py-5 text-white relative overflow-hidden">
            <div className="absolute inset-0 bg-gradient-to-r from-blue-400/20 to-purple-400/20"></div>
            <div className="relative z-10 flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-white/20 rounded-full backdrop-blur-sm">
                  <MapPin className="w-5 h-5" />
                </div>
                <div>
                  <h2 className="text-lg font-semibold">Reportar problema</h2>
                  <p className="text-blue-100 text-sm opacity-90">
                    Ay√∫danos a mejorar la ciudad
                  </p>
                </div>
              </div>
              <button
                onClick={handleClose}
                className="p-2 hover:bg-white/20 rounded-full transition-colors"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          </div>

          {/* Contenido principal */}
          <div className="p-6">
            <AnimatePresence mode="wait">
              {!selectedCategory ? (
                // Paso 1: Seleccionar categor√≠a
                <motion.div
                  key="category-selection"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ duration: 0.3 }}
                >
                  <h3 className="text-lg font-semibold mb-4 text-gray-800">
                    ¬øQu√© tipo de problema encontraste?
                  </h3>
                  <div className="space-y-3">
                    {INCIDENT_CATEGORIES.map((category, index) => (
                      <motion.button
                        key={category.name}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.3, delay: index * 0.1 }}
                        type="button"
                        onClick={() => setSelectedCategory(category.name)}
                        className="w-full p-4 rounded-2xl bg-gradient-to-r from-gray-50 to-gray-100 hover:from-blue-50 hover:to-blue-100 border border-gray-200 hover:border-blue-300 transition-all duration-300 text-left group"
                      >
                        <div className="flex items-center justify-between">
                          <span className="text-lg font-medium text-gray-800 group-hover:text-blue-800">
                            {category.name}
                          </span>
                          <div className="w-8 h-8 rounded-full bg-white shadow-sm flex items-center justify-center group-hover:bg-blue-100 transition-colors">
                            <CheckCircle2 className="w-4 h-4 text-gray-400 group-hover:text-blue-500" />
                          </div>
                        </div>
                      </motion.button>
                    ))}
                  </div>
                </motion.div>
              ) : !selectedType ? (
                // Paso 2: Seleccionar tipo espec√≠fico
                <motion.div
                  key="type-selection"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className="flex items-center gap-3 mb-4">
                    <button
                      onClick={() => setSelectedCategory('')}
                      className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                    >
                      <X className="w-4 h-4 text-gray-600" />
                    </button>
                    <h3 className="text-lg font-semibold text-gray-800">
                      {selectedCategory}
                    </h3>
                  </div>
                  <div className="grid grid-cols-1 gap-3">
                    {selectedCategoryData?.types.map((type, index) => {
                      const IconComponent = ICON_MAP[type.icon as keyof typeof ICON_MAP];
                      return (
                        <motion.button
                          key={type.id}
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ duration: 0.3, delay: index * 0.1 }}
                          type="button"
                          onClick={() => handleTypeSelect(type)}
                          className="p-4 rounded-2xl bg-white border-2 border-gray-200 hover:border-blue-400 hover:shadow-lg transition-all duration-300 text-left group"
                        >
                          <div className="flex items-center gap-4">
                            <div 
                              className="p-3 rounded-xl"
                              style={{ 
                                backgroundColor: `${type.color}15`,
                                color: type.color 
                              }}
                            >
                              <IconComponent className="w-6 h-6" />
                            </div>
                            <span className="font-medium text-gray-800 group-hover:text-blue-800">
                              {type.name}
                            </span>
                          </div>
                        </motion.button>
                      );
                    })}
                  </div>
                </motion.div>
              ) : (
                // Paso 3: Formulario de detalles
                <motion.div
                  key="details-form"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className="flex items-center gap-3 mb-6">
                    <button
                      onClick={() => setSelectedType(null)}
                      className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                    >
                      <X className="w-4 h-4 text-gray-600" />
                    </button>
                    <div className="flex items-center gap-3">
                      <div 
                        className="p-2 rounded-lg"
                        style={{ 
                          backgroundColor: `${selectedType.color}15`,
                          color: selectedType.color 
                        }}
                      >
                        {React.createElement(ICON_MAP[selectedType.icon as keyof typeof ICON_MAP], { className: "w-5 h-5" })}
                      </div>
                      <span className="font-semibold text-gray-800">{selectedType.name}</span>
                    </div>
                  </div>

                  <form onSubmit={handleSubmit} className="space-y-5">
                    {/* T√≠tulo */}
                    <motion.div
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: 0.1 }}
                    >
                      <label className="block text-sm font-medium mb-2 text-gray-700">
                        T√≠tulo
                      </label>
                      <input
                        type="text"
                        value={title}
                        onChange={(e) => setTitle(e.target.value)}
                        className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                        placeholder="Describe brevemente el problema"
                        required
                      />
                    </motion.div>

                    {/* Descripci√≥n */}
                    <motion.div
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: 0.2 }}
                    >
                      <label className="block text-sm font-medium mb-2 text-gray-700">
                        Descripci√≥n <span className="text-gray-400">(opcional)</span>
                      </label>
                      <textarea
                        value={description}
                        onChange={(e) => setDescription(e.target.value)}
                        rows={3}
                        className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 resize-none"
                        placeholder="A√±ade m√°s detalles si lo consideras necesario"
                      />
                    </motion.div>

                    {/* Secci√≥n de foto simplificada */}
                    <motion.div
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: 0.3 }}
                    >
                      <div className="border-2 border-dashed border-gray-300 rounded-xl p-4 text-center hover:border-blue-400 hover:bg-blue-50/30 transition-all duration-200 cursor-pointer">
                        <Camera className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                        <p className="text-sm text-gray-600">
                          Agregar foto <span className="text-gray-400">(pr√≥ximamente)</span>
                        </p>
                      </div>
                    </motion.div>

                    {/* Bot√≥n de env√≠o */}
                    <motion.div
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: 0.4 }}
                      className="pt-4"
                    >
                      <Button 
                        type="submit" 
                        className="w-full bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-semibold py-3 px-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
                      >
                        <Send className="w-5 h-5 mr-2" />
                        Enviar reporte
                      </Button>
                    </motion.div>
                  </form>
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        </motion.div>
      </DialogContent>
    </Dialog>
  );
};
